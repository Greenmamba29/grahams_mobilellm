// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication and organizations
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("member") // owner, admin, member
  
  // Organization relationship
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  // Relations
  accounts    Account[]
  sessions    Session[]
  documents   Document[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  
  // Subscription info
  plan              String  @default("trial") // trial, knowledge_pro
  stripeCustomerId  String?
  subscriptionId    String?
  subscriptionStatus String? // active, canceled, past_due
  
  // Usage limits
  documentsUsed     Int @default(0)
  documentsLimit    Int @default(5) // trial: 5, knowledge_pro: 1000
  
  // Relations
  users     User[]
  documents Document[]
  entities  Entity[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Document processing
model Document {
  id                String @id @default(cuid())
  filename          String
  originalName      String
  fileSize          Int
  mimeType          String
  
  // File storage
  fileUrl           String
  
  // Processing status
  status            String @default("processing") // processing, completed, failed
  
  // Extracted content
  textContent       String? @db.Text
  summary           String? @db.Text
  
  // Classification
  category          String? // contract, report, proposal, invoice, etc.
  confidence        Float?
  
  // Metadata
  pageCount         Int?
  wordCount         Int?
  language          String?
  processingTime    Int? // milliseconds
  
  // Relations
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  uploadedBy        String
  user              User @relation(fields: [uploadedBy], references: [id])
  
  entities          DocumentEntity[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
}

// Extracted entities from documents
model Entity {
  id            String @id @default(cuid())
  text          String
  type          String // PERSON, ORGANIZATION, DATE, MONEY, LOCATION, etc.
  normalizedText String? // cleaned/standardized version
  
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  documents     DocumentEntity[]
  
  createdAt     DateTime @default(now())
  
  @@unique([organizationId, text, type])
  @@index([organizationId, type])
}

// Many-to-many relationship between documents and entities
model DocumentEntity {
  id           String @id @default(cuid())
  
  documentId   String
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  entityId     String
  entity       Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Entity occurrence details
  confidence   Float?
  startPos     Int?
  endPos       Int?
  context      String? // surrounding text
  
  @@unique([documentId, entityId])
}

// Usage tracking for analytics
model Usage {
  id             String @id @default(cuid())
  
  organizationId String
  userId         String?
  
  action         String // document_upload, document_process, api_call, etc.
  resourceId     String? // document ID, etc.
  
  metadata       Json?
  
  createdAt      DateTime @default(now())
  
  @@index([organizationId, createdAt])
  @@index([organizationId, action])
}